---
- name: Prepare Kubernetes Demo
  hosts: kubernetes-cluster-agent
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Install python for Ansible
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal python-zipstream)
      become: true
      changed_when: false
    - name: Install python-pip
      become: true
      apt:
        name: [python-pip, virtualenv, libyajl2]  # venv and yajl2 if you wanna run the simulator
        state: present
        update_cache: yes
      retries: 20
      delay: 10
      register: pip_result
      until: pip_result is not failed
    - name: Installing python boto packages
      pip:
        name: boto,boto3
    - name: Add Docker GPG APT key
      become: true
      apt_key: url=https://download.docker.com/linux/ubuntu/gpg
    - name: Add Docker APT repository
      become: true
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
    - name: Install APT packages
      become: true
      apt:
        name: [apt-transport-https, ca-certificates, curl, software-properties-common, docker-ce, awscli, postgresql-client-10, unzip]
        state: present
        update_cache: yes
      register: apt_res
      retries: 5
      delay: 5
      until: apt_res is success
    - name: Add user to docker group
      become: true
      user:
        name: ubuntu
        groups: docker
        append: True
    - name: Restart sshd to apply group change
      shell: sleep 1; pkill -u {{ ansible_ssh_user }} sshd
      async: 3
      poll: 2
    - name: Ensure .aws config directory exists
      file:
        path: /home/ubuntu/.aws/
        recurse: yes
        state: directory
    - name: Configure aws credentials
      copy:
        content: |
          [default]
          aws_access_key_id = {{ lookup("env", "AWS_ACCESS_KEY_ID")}}
          aws_secret_access_key = {{ lookup("env", "AWS_SECRET_ACCESS_KEY")}}
        dest: /home/ubuntu/.aws/credentials
    - name: Configure aws config
      copy:
        content: |
          [default]
          region=eu-west-1
          output=json
        dest: /home/ubuntu/.aws/config
    - name: Run Docker login
      shell: eval $(aws ecr get-login --no-include-email)
    - name: Download and unarchive Terraform
      become: true
      unarchive:
        src: "https://releases.hashicorp.com/terraform/0.12.7/terraform_0.12.7_linux_amd64.zip"
        dest: "/usr/local/bin/"
        remote_src: yes
        mode: "0755"
    - name: Install AWS authenticator
      become: true
      get_url:
        url: "https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-06-05/bin/linux/amd64/heptio-authenticator-aws"
        dest: "/usr/local/bin/"
        force: True
        mode: "0755"
    - name: Install kubectl
      become: true
      get_url:
        url: "https://storage.googleapis.com/kubernetes-release/release/v1.15.3/bin/linux/amd64/kubectl"
        dest: "/usr/local/bin/"
        force: True
        mode: "0755"
    - name: Copy Configuration files
      copy:
        src: "files/"
        dest: "/home/ubuntu/"
    - name: Removing existing eks key-pair if exits
      file:
        path: "/home/ubuntu/terraform-scripts/{{ item }}"
        state: absent
      with_items:
        - eks_rsa
        - eks_rsa.pub
        - .terraform
    - name: Generate keypair for login in ec2 instances
      command: ssh-keygen -f /home/ubuntu/terraform-scripts/eks_rsa -P ""
    - name: Run make plan
      make:
        chdir: /home/ubuntu/terraform-scripts
        target: plan
      environment:
        AWS_ACCESS_KEY_ID: '{{lookup("env", "AWS_ACCESS_KEY_ID")}}'
        AWS_SECRET_ACCESS_KEY: '{{lookup("env", "AWS_SECRET_ACCESS_KEY")}}'
        TF_VAR_AWS_SECRET_ACCESS_KEY: '{{lookup("env", "AWS_SECRET_ACCESS_KEY")}}'
        TF_VAR_AWS_ACCESS_KEY_ID: '{{lookup("env", "AWS_ACCESS_KEY_ID")}}'
        TF_VAR_SCALING_DESIRED_CAPACITY: 2
        TF_VAR_AWS_REGION: eu-west-1
        TF_VAR_CLUSTER_NAME: cluster-agent-test
        TF_VAR_BUCKET_BACKEND_NAME: lupulus-sandbox-terraform-state
    - name: Run make apply
      make:
        chdir: /home/ubuntu/terraform-scripts
        target: apply
    - name: Run make kubeconfig
      make:
        chdir: /home/ubuntu/terraform-scripts
        target: kubeconfig
    - name: Set Kubeconfig
      command: export KUBECONFIG=/home/ubuntu/terraform-scripts/kubeconfig
    - name: Run make config-map-aws-auth
      make:
        chdir: /home/ubuntu/terraform-scripts
        target: config-map-aws-auth
    - name: Create secret for java demo app
      command: kubectl create secret generic ecr-reg-key --from-file=.dockerconfigjson=/home/ubuntu/.docker/config.json --type=kubernetes.io/dockerconfigjson
    - name: Apply config files for cluster agent setup
      command: chdir=/home/ubuntu/manifests/ {{ item }}
      with_items:
        - kubectl apply -f rbac-cluster-agent.yaml
        - kubectl apply -f cluster-auth-token.yaml
        - kubectl apply -f cluster-agent.yaml
        - kubectl apply -f rbac-agent.yaml
        - kubectl apply -f agent.yaml
        - kubectl apply -f java-db-demo.yaml
      environment:
        AGENT_VERSION: "{{ agent_current_branch }}"
        DOCKER_HOST_IP: "{{ ansible_docker0['ipv4']['address'] }}"
